generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PayStructure {
  id         String     @id @default(cuid())
  name       String?    @unique
  commission Decimal?
  hourlyRate Decimal
  position   Position
  employee   Employee[]
}

model Employee {
  id             String       @id @default(cuid())
  name           String
  email          String       @unique
  employeeId     Int
  department     Department
  hireDate       DateTime
  birthdate      DateTime
  payStructureId String
  payStructure   PayStructure @relation(fields: [payStructureId], references: [id])

  @@index([payStructureId], map: "Employee_payStructureId_fkey")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account?
  Authenticator Authenticator[]
  sessions      Session[]
}

model Tool {
  id          String        @id @unique @default(cuid())
  barcode     String
  bmwGroup    Int
  bmwSubGroup Int
  cabinet     Int
  chassis     String?
  comments    String?
  condition   ToolCondition @default(OKAY)
  description String?
  image       String?
  location    String?
  name        String
  toolBoard   String
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Position {
  GENERAL_MANAGER
  SERVICE_ADVISOR
  TECHNICIAN
  SHOP_ASSISTANT
  OFFICE_ASSISTANT
  OWNER
  TR_DEVELOPER
  IT_DEVELOPER
  SA_PARTS
  TECHNICIAN_A
  TECHNICIAN_B
  TECHNICIAN_C
}

enum Department {
  SALES
  SERVICE
  SUPPORT
  ADMIN
  DEVELOPMENT
}

enum ToolCondition {
  OKAY
  DAMAGED
  BROKEN
}
